{"version":3,"sources":["components/CalculatorDisplay.tsx","components/CalculatorButton.tsx","components/CalculatorControls.tsx","helpers/utils.ts","helpers/CalculationEngine.ts","helpers/CalculationQueue.ts","helpers/CalculatorInputManager.ts","helpers/calculatorProcessors.ts","hooks/useCalculatorState.ts","components/Calculator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CalculatorDisplay","calculatorState","className","calculationsQueue","getQueueAsArray","join","id","currentInput","CalculatorButton","value","textColor","onClick","rest","CalculatorControls","processInput","resetCalculator","isNumber","test","isOperator","isZero","isEqualOperator","isMinusOperator","isDivisionOperator","isDot","isEmptyString","length","isStringOfNumbers","isStringOfNumbersWithDotInTheMiddle","getTheNumberOfDecimalPlaces","number","numbersAfterDecimal","String","match","CalculationEngine","calculateQueue","calculationQueue","isValidForCalculation","Error","arrayWithPlusAndMinusProcessed","calculationArray","includes","i","current","isAddOperation","isSubtractionOperation","firstOperand","Number","secondOperand","result","splice","processPlusAndMinus","isMultiplyOperation","isDivisionOperation","processMultiplyAndDivision","formatOutput","numberOfDecimalPlaces","toFixed","processCalculation","calculationResult","this","appendToQueue","CalculationQueue","initialQueue","queue","isEndsWithOperator","currentQueue","slice","getLastItem","isFinished","isValidStructured","isProperlyCalculated","indexOf","currentItem","isEven","CalculatorInputManager","processors","isApply","state","process","isStringOfNumbersEndsWithDot","removeOperatorFromTheEndOfTheQueue","isEndsWithNumber","isEmpty","resultQueue","resultInput","getCalculationResult","currentProcessor","initialCalculatorState","Calculator","initialState","useState","setState","useCalculatorState","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b173db04.chunk.js","sourcesContent":["import React from 'react'\r\nimport './CalculatorDisplay.css'\r\nimport { CalculatorState } from '../hooks/useCalculatorState'\r\n\r\ntype CalculatorDisplayProps = {\r\n    calculatorState: CalculatorState\r\n}\r\n\r\nconst CalculatorDisplay: React.FC<CalculatorDisplayProps> = ({ calculatorState }: CalculatorDisplayProps) => {\r\n  return (\r\n    <header className='CalculatorDisplay card-header has-background-grey-lighter'>\r\n      <div className='card-header-title has-text-right'>\r\n        <p className='has-text-grey CalculatorDisplay__calculationsQueue'>\r\n          {calculatorState.calculationsQueue.getQueueAsArray().join(' ')}\r\n        </p>\r\n        <p className='is-size-3' id='display'>{calculatorState.currentInput || 0}</p>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default CalculatorDisplay\r\n","import React from 'react'\r\nimport './CalculatorButton.css'\r\n\r\ntype CalculatorButtonProps = {\r\n    value: string\r\n    textColor: string\r\n    onClick: (value: string) => void\r\n    [x: string]: any\r\n}\r\n\r\nconst CalculatorButton: React.FC<CalculatorButtonProps> = ({ value, textColor, onClick, ...rest }: CalculatorButtonProps) => {\r\n  return (\r\n    <button\r\n      className={`CalculatorButton button is-fullwidth is-${textColor}`}\r\n      onClick={() => onClick(value)}\r\n      {...rest}\r\n    >\r\n      {value}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default CalculatorButton\r\n","import React from 'react'\r\nimport CalculatorButton from './CalculatorButton'\r\n\r\ntype CalculatorControlsProps = {\r\n  processInput: (value: string) => void\r\n  resetCalculator: () => void\r\n}\r\n\r\nconst CalculatorControls: React.FC<CalculatorControlsProps> = ({\r\n  processInput,\r\n  resetCalculator\r\n}: CalculatorControlsProps) => {\r\n  return (\r\n    <div className='card-content'>\r\n      <div className='content calculator__controls'>\r\n        <div className='columns is-multiline is-mobile'>\r\n          <div className='column is-half'>\r\n            <CalculatorButton\r\n              value='AC'\r\n              textColor='danger'\r\n              onClick={resetCalculator}\r\n              id='clear'\r\n            />\r\n          </div>\r\n          <div className='column is-one-quarter'>\r\n            <CalculatorButton\r\n              value='/'\r\n              textColor='light'\r\n              onClick={processInput}\r\n              id='divide'\r\n            />\r\n          </div>\r\n          <div className='column is-one-quarter'>\r\n            <CalculatorButton\r\n              value='*'\r\n              textColor='light'\r\n              onClick={processInput}\r\n              id='multiply'\r\n            />\r\n          </div>\r\n          <div className='column is-one-quarter'>\r\n            <CalculatorButton\r\n              value='7'\r\n              textColor='primary'\r\n              onClick={processInput}\r\n              id='seven'\r\n            />\r\n          </div>\r\n          <div className='column is-one-quarter'>\r\n            <CalculatorButton\r\n              value='8'\r\n              textColor='primary'\r\n              onClick={processInput}\r\n              id='eight'\r\n            />\r\n          </div>\r\n          <div className='column is-one-quarter'>\r\n            <CalculatorButton\r\n              value='9'\r\n              textColor='primary'\r\n              onClick={processInput}\r\n              id='nine'\r\n            />\r\n          </div>\r\n          <div className='column is-one-quarter'>\r\n            <CalculatorButton\r\n              value='-'\r\n              textColor='light'\r\n              onClick={processInput}\r\n              id='subtract'\r\n            />\r\n          </div>\r\n          <div className='column is-one-quarter'>\r\n            <CalculatorButton\r\n              value='4'\r\n              textColor='primary'\r\n              onClick={processInput}\r\n              id='four'\r\n            />\r\n          </div>\r\n          <div className='column is-one-quarter'>\r\n            <CalculatorButton\r\n              value='5'\r\n              textColor='primary'\r\n              onClick={processInput}\r\n              id='five'\r\n            />\r\n          </div>\r\n          <div className='column is-one-quarter'>\r\n            <CalculatorButton\r\n              value='6'\r\n              textColor='primary'\r\n              onClick={processInput}\r\n              id='six'\r\n            />\r\n          </div>\r\n          <div className='column is-one-quarter'>\r\n            <CalculatorButton\r\n              value='+'\r\n              textColor='light'\r\n              onClick={processInput}\r\n              id='add'\r\n            />\r\n          </div>\r\n          <div className='column is-three-quarters'>\r\n            <div className='columns is-multiline is-mobile'>\r\n              <div className='column is-one-third'>\r\n                <CalculatorButton\r\n                  value='1'\r\n                  textColor='primary'\r\n                  onClick={processInput}\r\n                  id='one'\r\n                />\r\n              </div>\r\n              <div className='column is-one-third'>\r\n                <CalculatorButton\r\n                  value='2'\r\n                  textColor='primary'\r\n                  onClick={processInput}\r\n                  id='two'\r\n                />\r\n              </div>\r\n              <div className='column is-one-third'>\r\n                <CalculatorButton\r\n                  value='3'\r\n                  textColor='primary'\r\n                  onClick={processInput}\r\n                  id='three'\r\n                />\r\n              </div>\r\n              <div className='column is-two-thirds'>\r\n                <CalculatorButton\r\n                  value='0'\r\n                  textColor='primary'\r\n                  onClick={processInput}\r\n                  id='zero'\r\n                />\r\n              </div>\r\n              <div className='column is-one-third'>\r\n                <CalculatorButton\r\n                  value='.'\r\n                  textColor='primary'\r\n                  onClick={processInput}\r\n                  id='decimal'\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className='column is-one-quarter'>\r\n            <CalculatorButton\r\n              value='='\r\n              textColor='info'\r\n              onClick={processInput}\r\n              id='equals'\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CalculatorControls\r\n","export const isNumber = (value: string): boolean => /^[0-9]$/.test(value)\r\nexport const isOperator = (value: string): boolean => /^[+\\-*=/]$/.test(value)\r\nexport const isZero = (value: string): boolean => value === '0'\r\nexport const isEqualOperator = (value: string): boolean => value === '='\r\nexport const isMinusOperator = (value: string): boolean => value === '-'\r\nexport const isPlusOperator = (value: string): boolean => value === '+'\r\nexport const isMultiplyOperator = (value: string): boolean => value === '*'\r\nexport const isDivisionOperator = (value: string): boolean => value === '/'\r\nexport const isDot = (value: string): boolean => value === '.'\r\nexport const isEmptyString = (value: string): boolean => value.length === 0\r\nexport const isStringOfNumbers = (value: string): boolean => /^-?[0-9]+$/.test(value)\r\nexport const isStringOfNumbersEndsWithDot = (value: string): boolean => /^-?[0-9]+\\.$/.test(value)\r\nexport const isStringOfNumbersWithDotInTheMiddle = (value: string): boolean => /^-?[0-9]+\\.[0-9]+$/.test(value)\r\n","import CalculationQueue from './CalculationQueue'\r\nimport { isDivisionOperator, isMinusOperator, isMultiplyOperator, isPlusOperator } from './utils'\r\n\r\nconst getTheNumberOfDecimalPlaces = (number: number): number => {\r\n  const numbersAfterDecimal = String(number).match(/^[0-9]+\\.([0-9]+)$/)\r\n\r\n  if (numbersAfterDecimal && numbersAfterDecimal[1]) {\r\n    return numbersAfterDecimal[1].length\r\n  }\r\n\r\n  return 0\r\n}\r\n\r\nconst processMultiplyAndDivision = (calculationArray: string[]): string[] => {\r\n  calculationArray = [...calculationArray]\r\n\r\n  while (calculationArray.includes('*') || calculationArray.includes('/')) {\r\n    for (let i = 1; i < calculationArray.length; i += 2) {\r\n      const current = calculationArray[i]\r\n      const isMultiplyOperation = isMultiplyOperator(current)\r\n      const isDivisionOperation = isDivisionOperator(current)\r\n\r\n      if (isMultiplyOperation || isDivisionOperation) {\r\n        const firstOperand = Number(calculationArray[i - 1])\r\n        const secondOperand = Number(calculationArray[i + 1])\r\n        const result = isMultiplyOperation ? firstOperand * secondOperand : firstOperand / secondOperand\r\n\r\n        calculationArray.splice(i - 1, 3, String(result))\r\n\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  return calculationArray\r\n}\r\n\r\nconst processPlusAndMinus = (calculationArray: string[]): string[] => {\r\n  calculationArray = [...calculationArray]\r\n\r\n  while (calculationArray.includes('+') || calculationArray.includes('-')) {\r\n    for (let i = 1; i < calculationArray.length; i += 2) {\r\n      const current = calculationArray[i]\r\n      const isAddOperation = isPlusOperator(current)\r\n      const isSubtractionOperation = isMinusOperator(current)\r\n\r\n      if (isAddOperation || isSubtractionOperation) {\r\n        const firstOperand = Number(calculationArray[i - 1])\r\n        const secondOperand = Number(calculationArray[i + 1])\r\n        const result = isAddOperation ? firstOperand + secondOperand : firstOperand - secondOperand\r\n\r\n        calculationArray.splice(i - 1, 3, String(result))\r\n\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  return calculationArray\r\n}\r\n\r\nconst CalculationEngine = {\r\n  calculateQueue (calculationQueue: CalculationQueue): number {\r\n    if (!calculationQueue.isValidForCalculation()) {\r\n      throw Error('Invalid calculation queue has been provided')\r\n    }\r\n\r\n    const calculationArray = calculationQueue.getQueueAsArray()\r\n    const arrayWithMultiplyAndDivisionProcessed = processMultiplyAndDivision(calculationArray)\r\n    const arrayWithPlusAndMinusProcessed = processPlusAndMinus(arrayWithMultiplyAndDivisionProcessed)\r\n\r\n    return Number(arrayWithPlusAndMinusProcessed[0])\r\n  },\r\n  formatOutput (result: number, numberOfDecimalPlaces = 4): string {\r\n    if (getTheNumberOfDecimalPlaces(result) > numberOfDecimalPlaces) {\r\n      return result.toFixed(numberOfDecimalPlaces)\r\n    }\r\n\r\n    return String(result)\r\n  },\r\n  processCalculation (calculationQueue: CalculationQueue, numberOfDecimalPlaces = 4): CalculationQueue {\r\n    const calculationResult = this.formatOutput(this.calculateQueue(calculationQueue), numberOfDecimalPlaces)\r\n\r\n    return calculationQueue.appendToQueue('=')\r\n      .appendToQueue(calculationResult)\r\n  }\r\n}\r\n\r\nexport default CalculationEngine\r\n","import { isOperator, isStringOfNumbers, isStringOfNumbersWithDotInTheMiddle } from './utils'\r\n\r\nclass CalculationQueue {\r\n    private readonly queue: string[]\r\n\r\n    constructor (initialQueue: string[] = []) {\r\n      this.queue = initialQueue\r\n    }\r\n\r\n    public getLastItem (): string {\r\n      return this.queue[this.queue.length - 1]\r\n    }\r\n\r\n    public getQueueAsArray (): string[] {\r\n      return [...this.queue]\r\n    }\r\n\r\n    public appendToQueue (value: string): CalculationQueue {\r\n      return new CalculationQueue([...this.queue, value])\r\n    }\r\n\r\n    public removeOperatorFromTheEndOfTheQueue (): CalculationQueue {\r\n      if (this.isEndsWithOperator()) {\r\n        const currentQueue = this.getQueueAsArray()\r\n\r\n        return new CalculationQueue(currentQueue.slice(0, currentQueue.length - 1))\r\n      }\r\n\r\n      return new CalculationQueue(this.getQueueAsArray())\r\n    }\r\n\r\n    public isFinished (): boolean {\r\n      return this.queue.includes('=')\r\n    }\r\n\r\n    public isEndsWithOperator (): boolean {\r\n      return isOperator(this.getLastItem())\r\n    }\r\n\r\n    public isEndsWithNumber (): boolean {\r\n      return isStringOfNumbers(this.getLastItem()) || isStringOfNumbersWithDotInTheMiddle(this.getLastItem())\r\n    }\r\n\r\n    public isEmpty (): boolean {\r\n      return this.queue.length === 0\r\n    }\r\n\r\n    public isValidForCalculation (): boolean {\r\n      if (this.isFinished()) {\r\n        return false\r\n      }\r\n\r\n      return this.isValidStructured()\r\n    }\r\n\r\n    public isProperlyCalculated (): boolean {\r\n      if (!this.isFinished()) {\r\n        return false\r\n      }\r\n\r\n      return this.isValidStructured()\r\n    }\r\n\r\n    public getCalculationResult (): string {\r\n      if (!this.isProperlyCalculated()) {\r\n        throw Error('Can\\'t get calculation result from the queue that wasn\\'t properly calculated')\r\n      }\r\n\r\n      return this.queue[this.queue.indexOf('=') + 1]\r\n    }\r\n\r\n    private isValidStructured (): boolean {\r\n      for (let i = 0; i < this.queue.length; i++) {\r\n        const currentItem = this.queue[i]\r\n        const isEven = i % 2 === 0\r\n\r\n        if (isEven && !(\r\n          isStringOfNumbers(currentItem) ||\r\n                isStringOfNumbersWithDotInTheMiddle(currentItem)\r\n        )) {\r\n          return false\r\n        }\r\n\r\n        if (!isEven && !isOperator(currentItem)) {\r\n          return false\r\n        }\r\n      }\r\n\r\n      return true\r\n    }\r\n}\r\n\r\nexport default CalculationQueue\r\n","import { CalculatorState } from '../hooks/useCalculatorState'\r\nimport calculatorProcessors, { CalculatorProcessor } from './calculatorProcessors'\r\n\r\nconst CalculatorInputManager: {\r\n  processors: CalculatorProcessor[]\r\n  processInput: (value: string, state: CalculatorState) => CalculatorState\r\n} = {\r\n  processors: calculatorProcessors,\r\n  processInput (value: string, state: CalculatorState): CalculatorState {\r\n    for (let i = 0; i < this.processors.length; i++) {\r\n      const currentProcessor = this.processors[i]\r\n\r\n      if (currentProcessor.isApply(value, state)) {\r\n        return currentProcessor.process(value, state)\r\n      }\r\n    }\r\n\r\n    return state\r\n  }\r\n}\r\n\r\nexport default CalculatorInputManager\r\n","import { CalculatorState } from '../hooks/useCalculatorState'\r\nimport {\r\n  isDot,\r\n  isEmptyString,\r\n  isEqualOperator,\r\n  isMinusOperator,\r\n  isNumber,\r\n  isOperator,\r\n  isStringOfNumbers,\r\n  isStringOfNumbersEndsWithDot,\r\n  isStringOfNumbersWithDotInTheMiddle,\r\n  isZero\r\n} from './utils'\r\nimport CalculationEngine from './CalculationEngine'\r\nimport CalculationQueue from './CalculationQueue'\r\n\r\nexport interface CalculatorProcessor {\r\n    isApply: (value: string, state: CalculatorState) => boolean\r\n    process: (value: string, state: CalculatorState) => CalculatorState\r\n}\r\n\r\nconst calculatorProcessors: CalculatorProcessor[] = [\r\n  {\r\n    isApply (value, state) {\r\n      return state.currentInput.length >= 15 &&\r\n          !state.calculationsQueue.isFinished() &&\r\n          (\r\n            isNumber(value) ||\r\n            isDot(value)\r\n          )\r\n    },\r\n    process (value, state) {\r\n      return {\r\n        calculationsQueue: new CalculationQueue(state.calculationsQueue.getQueueAsArray()),\r\n        currentInput: state.currentInput\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isNumber(value) &&\r\n          isEmptyString(state.currentInput) &&\r\n          !state.calculationsQueue.isFinished()\r\n    },\r\n    process (value, state) {\r\n      return {\r\n        calculationsQueue: new CalculationQueue(state.calculationsQueue.getQueueAsArray()),\r\n        currentInput: `${state.currentInput}${value}`\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isNumber(value) &&\r\n          !isZero(value) &&\r\n           isZero(state.currentInput) &&\r\n          !state.calculationsQueue.isFinished()\r\n    },\r\n    process (value, state) {\r\n      return {\r\n        calculationsQueue: new CalculationQueue(state.calculationsQueue.getQueueAsArray()),\r\n        currentInput: state.currentInput\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isZero(value) &&\r\n           isZero(state.currentInput) &&\r\n          !state.calculationsQueue.isFinished()\r\n    },\r\n    process (value, state) {\r\n      return {\r\n        calculationsQueue: new CalculationQueue(state.calculationsQueue.getQueueAsArray()),\r\n        currentInput: state.currentInput\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isNumber(value) &&\r\n          isStringOfNumbers(state.currentInput) &&\r\n          !state.calculationsQueue.isFinished()\r\n    },\r\n    process (value, state) {\r\n      return {\r\n        calculationsQueue: new CalculationQueue(state.calculationsQueue.getQueueAsArray()),\r\n        currentInput: `${state.currentInput}${value}`\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isNumber(value) &&\r\n          isStringOfNumbersEndsWithDot(state.currentInput) &&\r\n          !state.calculationsQueue.isFinished()\r\n    },\r\n    process (value, state) {\r\n      return {\r\n        calculationsQueue: new CalculationQueue(state.calculationsQueue.getQueueAsArray()),\r\n        currentInput: `${state.currentInput}${value}`\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isNumber(value) &&\r\n          isStringOfNumbersWithDotInTheMiddle(state.currentInput) &&\r\n          !state.calculationsQueue.isFinished()\r\n    },\r\n    process (value, state) {\r\n      return {\r\n        calculationsQueue: new CalculationQueue(state.calculationsQueue.getQueueAsArray()),\r\n        currentInput: `${state.currentInput}${value}`\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isNumber(value) &&\r\n          isMinusOperator(state.currentInput) &&\r\n          state.calculationsQueue.isEndsWithOperator() &&\r\n          !state.calculationsQueue.isFinished()\r\n    },\r\n    process (value, state) {\r\n      return {\r\n        calculationsQueue: new CalculationQueue(state.calculationsQueue.getQueueAsArray()),\r\n        currentInput: `-${value}`\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isNumber(value) &&\r\n          isOperator(state.currentInput) &&\r\n          !isEqualOperator(state.currentInput) &&\r\n          !state.calculationsQueue.isFinished()\r\n    },\r\n    process (value, state) {\r\n      return {\r\n        calculationsQueue: state.calculationsQueue.appendToQueue(state.currentInput),\r\n        currentInput: value\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isDot(value) &&\r\n          isStringOfNumbers(state.currentInput)\r\n    },\r\n    process (value, state) {\r\n      return {\r\n        calculationsQueue: new CalculationQueue(state.calculationsQueue.getQueueAsArray()),\r\n        currentInput: `${state.currentInput}${value}`\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isOperator(value) &&\r\n          isMinusOperator(state.currentInput) &&\r\n          state.calculationsQueue.isEndsWithOperator() &&\r\n          !state.calculationsQueue.isFinished()\r\n    },\r\n    process (value, state) {\r\n      return {\r\n        calculationsQueue: state.calculationsQueue.removeOperatorFromTheEndOfTheQueue(),\r\n        currentInput: value\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isMinusOperator(value) &&\r\n          isOperator(state.currentInput) &&\r\n          state.calculationsQueue.isEndsWithNumber() &&\r\n          !state.calculationsQueue.isFinished()\r\n    },\r\n    process (value, state) {\r\n      return {\r\n        calculationsQueue: state.calculationsQueue.appendToQueue(state.currentInput),\r\n        currentInput: value\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isOperator(value) &&\r\n          !isMinusOperator(value) &&\r\n          !isEqualOperator(value) &&\r\n          isOperator(state.currentInput) &&\r\n          state.calculationsQueue.isEndsWithNumber() &&\r\n          !state.calculationsQueue.isFinished()\r\n    },\r\n    process (value, state) {\r\n      return {\r\n        calculationsQueue: new CalculationQueue(state.calculationsQueue.getQueueAsArray()),\r\n        currentInput: value\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isOperator(value) &&\r\n          !isEqualOperator(value) &&\r\n          !state.calculationsQueue.isFinished() &&\r\n          (\r\n            isStringOfNumbers(state.currentInput) ||\r\n            isStringOfNumbersWithDotInTheMiddle(state.currentInput)\r\n          )\r\n    },\r\n    process (value, state) {\r\n      return {\r\n        calculationsQueue: state.calculationsQueue.appendToQueue(state.currentInput),\r\n        currentInput: value\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isOperator(value) &&\r\n          !isEqualOperator(value) &&\r\n          state.calculationsQueue.isEmpty() &&\r\n          isEmptyString(state.currentInput)\r\n    },\r\n    process (value) {\r\n      return {\r\n        calculationsQueue: new CalculationQueue(['0']),\r\n        currentInput: value\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isOperator(value) &&\r\n          !isEqualOperator(value) &&\r\n          state.calculationsQueue.isFinished() &&\r\n          (\r\n            isStringOfNumbers(state.currentInput) ||\r\n            isStringOfNumbersWithDotInTheMiddle(state.currentInput)\r\n          )\r\n    },\r\n    process (value, state) {\r\n      return {\r\n        calculationsQueue: new CalculationQueue([state.currentInput]),\r\n        currentInput: value\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isNumber(value) &&\r\n          state.calculationsQueue.isFinished() &&\r\n          (\r\n            isStringOfNumbers(state.currentInput) ||\r\n            isStringOfNumbersWithDotInTheMiddle(state.currentInput)\r\n          )\r\n    },\r\n    process (value) {\r\n      return {\r\n        calculationsQueue: new CalculationQueue(),\r\n        currentInput: value\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isEqualOperator(value) &&\r\n          (\r\n            isStringOfNumbers(state.currentInput) ||\r\n            isStringOfNumbersWithDotInTheMiddle(state.currentInput)\r\n          ) &&\r\n          state.calculationsQueue.isEndsWithOperator()\r\n    },\r\n    process (value, state) {\r\n      const calculationsQueue = state.calculationsQueue.appendToQueue(state.currentInput)\r\n      const resultQueue = CalculationEngine.processCalculation(calculationsQueue)\r\n      const resultInput = resultQueue.getCalculationResult()\r\n\r\n      return {\r\n        calculationsQueue: resultQueue,\r\n        currentInput: resultInput\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isEqualOperator(value) &&\r\n          isOperator(state.currentInput) &&\r\n          state.calculationsQueue.isEndsWithNumber()\r\n    },\r\n    process (value, state) {\r\n      const resultQueue = CalculationEngine.processCalculation(state.calculationsQueue)\r\n      const resultInput = resultQueue.getCalculationResult()\r\n\r\n      return {\r\n        calculationsQueue: resultQueue,\r\n        currentInput: resultInput\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isEqualOperator(value) &&\r\n          (\r\n            isStringOfNumbers(state.currentInput) ||\r\n            isStringOfNumbersWithDotInTheMiddle(state.currentInput)\r\n          ) &&\r\n          state.calculationsQueue.isEmpty()\r\n    },\r\n    process (value, state) {\r\n      return {\r\n        calculationsQueue: state.calculationsQueue\r\n          .appendToQueue(state.currentInput)\r\n          .appendToQueue('=')\r\n          .appendToQueue(state.currentInput),\r\n        currentInput: state.currentInput\r\n      }\r\n    }\r\n  },\r\n  {\r\n    isApply (value, state) {\r\n      return isEqualOperator(value) &&\r\n          isEmptyString(state.currentInput) &&\r\n          state.calculationsQueue.isEmpty()\r\n    },\r\n    process (value, state) {\r\n      return {\r\n        calculationsQueue: new CalculationQueue(state.calculationsQueue.getQueueAsArray()),\r\n        currentInput: state.currentInput\r\n      }\r\n    }\r\n  }\r\n]\r\n\r\nexport default calculatorProcessors\r\n","import { useState } from 'react'\r\nimport CalculatorInputManager from '../helpers/CalculatorInputManager'\r\nimport CalculationQueue from '../helpers/CalculationQueue'\r\n\r\nexport interface CalculatorState {\r\n  calculationsQueue: CalculationQueue\r\n  currentInput: string\r\n}\r\n\r\nconst initialCalculatorState: CalculatorState = {\r\n  calculationsQueue: new CalculationQueue(),\r\n  currentInput: ''\r\n}\r\n\r\nexport default function useCalculatorState (initialState: CalculatorState | null = null) {\r\n  const [state, setState] = useState<CalculatorState>(initialState || initialCalculatorState)\r\n  const processInput = (value: string) => {\r\n    setState(CalculatorInputManager.processInput(value, state))\r\n  }\r\n  const resetCalculator = () => {\r\n    setState(initialCalculatorState)\r\n  }\r\n\r\n  return {\r\n    state,\r\n    processInput,\r\n    resetCalculator\r\n  }\r\n}\r\n","import React from 'react'\r\nimport './Calculator.css'\r\nimport CalculatorDisplay from './CalculatorDisplay'\r\nimport CalculatorControls from './CalculatorControls'\r\nimport useCalculatorState from '../hooks/useCalculatorState'\r\n\r\nconst Calculator = () => {\r\n  const {\r\n    state,\r\n    processInput,\r\n    resetCalculator\r\n  } = useCalculatorState()\r\n\r\n  return (\r\n    <div className='card Calculator'>\r\n      <CalculatorDisplay calculatorState={state}/>\r\n      <CalculatorControls\r\n        processInput={processInput}\r\n        resetCalculator={resetCalculator}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Calculator\r\n","import React from 'react'\nimport './App.css'\nimport Calculator from './components/Calculator'\n\nfunction App () {\n  return (\n    <div className='App'>\n      <Calculator />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bulma/css/bulma.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}